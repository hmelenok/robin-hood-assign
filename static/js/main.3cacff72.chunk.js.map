{"version":3,"sources":["AddUserBlock.tsx","logo.png","components/TopHeader.tsx","components/User.tsx","helpers.ts","components/PageTitle.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["AdduserBlock","onSubmit","Form","formState","formProps","Field","name","defaultValue","isRequired","fieldProps","Textfield","placeholder","FormFooter","css","type","appearance","TopHeader","AvatarItem","backgroundColor","avatar","Avatar","src","logo","primaryText","User","user","status","onRemove","color","role","tabIndex","onKeyDown","onClick","size","label","MAIN_TITLE","PageTitle","userTitle","Helmet","debug","debugLib","Wrapper","borderColor","children","minHeight","noOutline","noHorizontalScrollbar","style","outline","outlineOffset","padding","height","boxSizing","overflowY","overflowX","textAlign","getAvatar","robohashAvatars","username","background","RandomBackground1","characters","Kittens","width","App","history","useHistory","useState","restoredState","setRestored","users","setUsers","topic","setTopic","currentUserIndex","setUserIndex","useEffect","a","JSON","decompress","decodeURIComponent","window","location","hash","substr","restoredStateValue","parse","compress","stringify","state","push","className","testId","id","skipLinkTitle","isFixed","minWidth","map","index","margin","undefined","filter","_user","currentIndex","removeUserByIndex","AddUserBlock","formData","randomColor","luminosity","format","InlineEdit","onConfirm","value","editView","ref","TextArea","readView","dangerouslySetInnerHTML","__html","md","get","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.3cacff72.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport Button from '@atlaskit/button/standard-button';\nimport Form, { Field, FormFooter, HelperMessage } from '@atlaskit/form';\n\nimport Textfield from '@atlaskit/textfield';\n\nexport interface FormData {\n  name: string\n}\n\nconst AdduserBlock = ({ onSubmit }: {onSubmit: (formData: FormData) => void}) => (\n  <Form\n    onSubmit={(formState: FormData) => onSubmit(formState)}\n  >\n    {({ formProps }: any) => (\n      <form {...formProps}>\n        <Field name=\"name\" defaultValue=\"\" isRequired>\n          {({ fieldProps }: any) => (\n            <>\n              <Textfield {...fieldProps} placeholder=\"Enter name\" />\n              <HelperMessage>\n                Add here you collegue\n              </HelperMessage>\n            </>\n          )}\n\n        </Field>\n        <FormFooter>\n          <Button css={{}} type=\"submit\" appearance=\"primary\">\n            Add\n          </Button>\n        </FormFooter>\n      </form>\n    )}\n  </Form>\n);\n\nexport default AdduserBlock;\n","export default __webpack_public_path__ + \"static/media/logo.b231e09d.png\";","import React from 'react';\nimport Avatar, { AvatarItem } from '@atlaskit/avatar';\nimport logo from '../logo.png';\n\nconst TopHeader = () => (\n  <AvatarItem backgroundColor=\"#a4b57b\" avatar={<Avatar src={logo} />} primaryText=\"RobinHood Assign\" />\n);\n\nexport default TopHeader;\n","import React from 'react';\nimport Avatar, { AvatarItem } from '@atlaskit/avatar';\nimport CrossIcon from '@atlaskit/icon/glyph/cross';\nimport { UserModel } from '../types';\n\nconst User = ({ user, status, onRemove }:{\n  user: UserModel, status: string | undefined, onRemove?: () =>void}) => (\n    <AvatarItem\n      backgroundColor={user.color}\n      avatar={<Avatar src={user.avatar} status={status} />}\n      primaryText={(\n        <>\n          {user.name}\n          {' '}\n          {onRemove && (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={() => onRemove()}\n            onClick={() => onRemove()}\n          >\n            <CrossIcon\n              size=\"small\"\n              label=\"Remove user\"\n            />\n          </span>\n          )}\n\n        </>\n            )}\n    />\n);\n\nexport default User;\n","export const MAIN_TITLE = 'RobinHood Assign';\n\nexport default { MAIN_TITLE };\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { MAIN_TITLE } from '../helpers';\n\nconst PageTitle = ({ userTitle }:{userTitle: string}) => (\n  <Helmet>\n    <title>{userTitle ? `${userTitle} | ${MAIN_TITLE}` : MAIN_TITLE}</title>\n  </Helmet>\n);\n\nexport default PageTitle;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport randomColor from 'randomcolor';\nimport { compress, decompress } from 'shrink-string';\nimport { get } from 'lodash';\nimport debugLib from 'debug';\nimport * as robohashAvatars from 'robohash-avatars';\nimport {\n  Content,\n  LeftSidebarWithoutResize,\n  Main,\n  PageLayout,\n  RightPanel,\n  TopNavigation,\n} from '@atlaskit/page-layout';\nimport Button from '@atlaskit/button/standard-button';\nimport { useHistory } from 'react-router-dom';\nimport InlineEdit from '@atlaskit/inline-edit';\nimport TextArea from '@atlaskit/textarea';\nimport md from 'md';\nimport AddUserBlock from './AddUserBlock';\nimport TopHeader from './components/TopHeader';\nimport User from './components/User';\nimport { UserModel } from './types';\nimport PageTitle from './components/PageTitle';\n\nconst debug = debugLib('robin:App');\nconst Wrapper = ({\n  borderColor,\n  children,\n  minHeight,\n  noOutline,\n  noHorizontalScrollbar,\n}: {\n  borderColor: string;\n  children: React.ReactNode;\n  minHeight?: string;\n  noOutline?: boolean;\n  noHorizontalScrollbar?: boolean;\n}) => (\n  <div\n    style={{\n      outline: noOutline ? 'none' : `0px dashed ${borderColor}`,\n      outlineOffset: -4,\n      padding: 8,\n      minHeight,\n      height: '100%',\n      boxSizing: 'border-box',\n      overflowY: 'auto',\n      overflowX: noHorizontalScrollbar ? 'hidden' : 'auto',\n      backgroundColor: 'white',\n      textAlign: 'left',\n    }}\n  >\n    {children}\n  </div>\n);\n\nconst getAvatar = (name: string) => robohashAvatars.generateAvatar({\n  username: name,\n  background: robohashAvatars.BackgroundSets.RandomBackground1,\n  characters: robohashAvatars.CharacterSets.Kittens,\n  height: 400,\n  width: 400,\n});\nconst getRandomByName = (name: string) => ({\n  name,\n  color: randomColor({\n    luminosity: 'light',\n    format: 'hex',\n  }),\n  avatar: getAvatar(name),\n});\n\nfunction App() {\n  const history = useHistory();\n  // Hack to async restore initial data (should be called once)\n  const [restoredState, setRestored] = useState<any>(false);\n\n  const [users, setUsers] = useState<UserModel[]>([]);\n  const [topic, setTopic] = useState('');\n  const [currentUserIndex, setUserIndex] = useState(0);\n\n  const removeUserByIndex = (index: number) => {\n    setUsers([...users\n      .filter((_user, currentIndex) => index !== currentIndex)]);\n  };\n  useEffect(() => {\n    (async () => {\n      debug('useEffect');\n      let restoredStateValue;\n      if (!restoredState) {\n        try {\n          restoredStateValue = JSON.parse(\n            await decompress(decodeURIComponent(window.location.hash.substr(3))),\n          );\n          setRestored(restoredStateValue);\n          setUsers(restoredStateValue.users || []);\n          setTopic(restoredStateValue.topic || '');\n          setUserIndex(restoredStateValue.currentUserIndex || 0);\n          debug('restored', { restoredStateValue });\n        } catch (e) {\n          // Bad Hash\n          setRestored({});\n          debug('restore skipped %o', restoredStateValue);\n        }\n      }\n      if (restoredState) {\n        const state = await compress(JSON.stringify({ users, currentUserIndex, topic }));\n        history.push({ hash: state });\n        debug('set state %o', { restoredStateValue, restoredState });\n      }\n    })();\n  }, [users, currentUserIndex, topic]);\n\n  return (\n    <div className=\"App\">\n      <PageTitle userTitle={topic} />\n      <header className=\"App-header\">\n        <TopHeader />\n      </header>\n      <PageLayout>\n\n        <TopNavigation\n          testId=\"topNavigation\"\n          id=\"product-navigation\"\n          skipLinkTitle=\"Product Navigation\"\n          height={90}\n          isFixed={false}\n        >\n          <Wrapper borderColor=\"blue\">\n            <h3 style={{ textAlign: 'center' }}>Assignment queue made easy!</h3>\n          </Wrapper>\n        </TopNavigation>\n        <Content testId=\"content\">\n          <LeftSidebarWithoutResize\n            testId=\"leftSidebar\"\n            id=\"space-navigation\"\n            skipLinkTitle=\"Available users\"\n            isFixed={false}\n            width={325}\n          >\n            <Wrapper borderColor=\"darkgreen\">\n              <div style={{ minWidth: 50, padding: '0 20px' }}>\n                <h4>Available persons</h4>\n\n                {users.map((user, index) => (\n                  <div style={{ margin: '5px 0' }}>\n                    <User user={user} status={currentUserIndex === index ? 'locked' : undefined} onRemove={() => removeUserByIndex(index)} />\n                  </div>\n\n                ))}\n                <AddUserBlock onSubmit={(formData) => {\n                  setUsers([...users, getRandomByName(formData.name)]);\n                }}\n                />\n              </div>\n            </Wrapper>\n          </LeftSidebarWithoutResize>\n          <Main testId=\"main\" id=\"main\">\n            <Wrapper borderColor=\"black\" minHeight=\"400px\">\n              <InlineEdit\n                defaultValue={topic}\n                onConfirm={(value) => setTopic(value)}\n                label=\"Current responsibility:\"\n                editView={(fieldProps, ref) => (\n                  // @ts-ignore\n                  <TextArea {...fieldProps} ref={ref} />\n                )}\n                readView={() => <article style={{ width: '100%' }} dangerouslySetInnerHTML={{ __html: md(topic) }} />}\n              />\n              {users[currentUserIndex] ? <User user={users[currentUserIndex]} status=\"locked\" /> : 'No responsible'}\n              <Button\n                style={{ margin: '10px 0' }}\n                css={{}}\n                type=\"submit\"\n                appearance=\"primary\"\n                onClick={() => setUserIndex(get(users, `[${currentUserIndex + 1}]`) ? currentUserIndex + 1 : 0)}\n              >\n                Set next responsible\n              </Button>\n            </Wrapper>\n          </Main>\n        </Content>\n        <RightPanel\n          testId=\"rightPanel\"\n          id=\"help-panel\"\n          skipLinkTitle=\"Help Panel\"\n          isFixed={false}\n          width={225}\n        >\n          <Wrapper borderColor=\"orange\">\n            <h3 style={{ textAlign: 'center' }}>Help Panel</h3>\n          </Wrapper>\n        </RightPanel>\n      </PageLayout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Route exact path=\"/\" component={App} />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}