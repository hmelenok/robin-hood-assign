{"version":3,"sources":["AddUserBlock.tsx","logo.png","components/TopHeader.tsx","components/User.tsx","helpers.ts","components/PageTitle.tsx","App.tsx","reportWebVitals.js","houdini-modules.js","index.tsx"],"names":["AdduserBlock","onSubmit","Form","formState","formProps","Field","name","defaultValue","isRequired","fieldProps","Textfield","placeholder","FormFooter","css","type","appearance","TopHeader","style","background","randomColor","luminosity","format","width","AvatarItem","backgroundColor","avatar","Avatar","src","logo","primaryText","color","User","user","status","onRemove","onSelect","selected","outline","className","role","tabIndex","onKeyDown","onClick","size","label","MAIN_TITLE","PageTitle","userTitle","Helmet","debug","debugLib","Wrapper","borderColor","children","minHeight","noOutline","noHorizontalScrollbar","outlineOffset","padding","height","boxSizing","overflowY","overflowX","textAlign","getAvatar","robohashAvatars","username","RandomBackground1","characters","Kittens","App","history","useHistory","useState","restoredState","setRestored","users","setUsers","topic","setTopic","currentUserIndex","setUserIndex","useEffect","a","JSON","decompress","decodeURIComponent","window","location","hash","substr","restoredStateValue","parse","compress","stringify","state","push","testId","id","skipLinkTitle","isFixed","map","index","undefined","filter","_user","currentIndex","removeUserByIndex","AddUserBlock","formData","InlineEdit","onConfirm","value","editView","ref","TextArea","readView","dangerouslySetInnerHTML","__html","md","get","InlineMessage","secondaryText","placement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerPaint","this","hue","ctx","geom","fillStyle","beginPath","moveTo","lineTo","fill","globalCompositeOperation","e","ReactDOM","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.5e7aaa08.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport Button from '@atlaskit/button/standard-button';\nimport Form, { Field, FormFooter, HelperMessage } from '@atlaskit/form';\n\nimport Textfield from '@atlaskit/textfield';\n\nexport interface FormData {\n  name: string\n}\n\nconst AdduserBlock = ({ onSubmit }: {onSubmit: (formData: FormData) => void}) => (\n  <Form\n    onSubmit={(formState: FormData) => onSubmit(formState)}\n  >\n    {({ formProps }: any) => (\n      <form {...formProps}>\n        <Field name=\"name\" defaultValue=\"\" isRequired>\n          {({ fieldProps }: any) => (\n            <>\n              <Textfield {...fieldProps} placeholder=\"Enter name\" />\n              <HelperMessage>\n                Add here you collegue\n              </HelperMessage>\n            </>\n          )}\n\n        </Field>\n        <FormFooter>\n          <Button css={{}} type=\"submit\" appearance=\"primary\">\n            Add\n          </Button>\n        </FormFooter>\n      </form>\n    )}\n  </Form>\n);\n\nexport default AdduserBlock;\n","export default __webpack_public_path__ + \"static/media/logo.b231e09d.png\";","import React from 'react';\nimport Avatar, { AvatarItem } from '@atlaskit/avatar';\nimport randomColor from 'randomcolor';\nimport logo from '../logo.png';\n\nconst TopHeader = () => (\n  <div style={{\n    background: `linear-gradient(90deg, ${randomColor({\n      luminosity: 'dark',\n      format: 'rgba',\n    })} 0%, ${randomColor({\n      luminosity: 'dark',\n      format: 'rgba',\n    })} 35%, ${randomColor({\n      luminosity: 'dark',\n      format: 'rgba',\n    })} 100%)`,\n    width: '100%',\n  }}\n  >\n    <AvatarItem\n      backgroundColor=\"transparent\"\n      avatar={<Avatar src={logo} />}\n      primaryText={<span style={{ color: 'white' }}>RobinHood Assign</span>}\n    />\n  </div>\n);\n\nexport default TopHeader;\n","import React from 'react';\nimport Avatar, { AvatarItem } from '@atlaskit/avatar';\nimport CrossIcon from '@atlaskit/icon/glyph/cross';\nimport { UserModel } from '../types';\n\nconst User = ({\n  user, status, onRemove, onSelect, selected,\n}:{\n  user: UserModel,\n  status: string | undefined, onRemove?: () =>void, onSelect?: () =>void, selected?: boolean}) => (\n    <div\n      style={{\n        background: `linear-gradient(90deg, ${user.color} 0%, #f1f1f1 35%, #fff 100%)`,\n        outline: selected ? `1px solid ${user.color}` : 'none',\n        width: '100%',\n      }}\n      className=\"User\"\n    >\n      <AvatarItem\n        backgroundColor=\"transparent\"\n        avatar={<Avatar src={user.avatar} status={status} />}\n        primaryText={(\n          <>\n            <span\n              role=\"button\"\n              tabIndex={-1}\n              onKeyDown={() => onSelect && onSelect()}\n              onClick={() => onSelect && onSelect()}\n            >\n              {user.name}\n            </span>\n            {' '}\n            {onRemove && (\n              <span\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={() => onRemove()}\n                onClick={() => onRemove()}\n              >\n                <CrossIcon\n                  size=\"small\"\n                  label=\"Remove user\"\n                />\n              </span>\n            )}\n\n          </>\n            )}\n      />\n    </div>\n);\n\nexport default User;\n","export const MAIN_TITLE = 'RobinHood Assign';\n\nexport default { MAIN_TITLE };\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { MAIN_TITLE } from '../helpers';\n\nconst PageTitle = ({ userTitle }:{userTitle?: string}) => (\n  <Helmet>\n    <title>{userTitle ? `${userTitle} | ${MAIN_TITLE}` : MAIN_TITLE}</title>\n  </Helmet>\n);\n\nexport default PageTitle;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport randomColor from 'randomcolor';\nimport { compress, decompress } from 'shrink-string';\nimport { get } from 'lodash';\nimport debugLib from 'debug';\nimport * as robohashAvatars from 'robohash-avatars';\nimport {\n  Content,\n  LeftSidebarWithoutResize,\n  Main,\n  PageLayout,\n  RightPanel,\n} from '@atlaskit/page-layout';\nimport Button from '@atlaskit/button/standard-button';\nimport { useHistory } from 'react-router-dom';\nimport InlineEdit from '@atlaskit/inline-edit';\nimport TextArea from '@atlaskit/textarea';\nimport md from 'md';\nimport InlineMessage from '@atlaskit/inline-message';\nimport AddUserBlock from './AddUserBlock';\nimport TopHeader from './components/TopHeader';\nimport User from './components/User';\nimport { UserModel } from './types';\nimport PageTitle from './components/PageTitle';\n\nconst debug = debugLib('robin:App');\nconst Wrapper = ({\n  borderColor,\n  children,\n  minHeight,\n  noOutline,\n  noHorizontalScrollbar,\n}: {\n  borderColor?: string;\n  children: React.ReactNode;\n  minHeight?: string;\n  noOutline?: boolean;\n  noHorizontalScrollbar?: boolean;\n}) => (\n  <div\n    style={{\n      outline: noOutline || !borderColor ? 'none' : `1px solid ${borderColor}`,\n      outlineOffset: -4,\n      padding: 8,\n      minHeight,\n      height: '100%',\n      boxSizing: 'border-box',\n      overflowY: 'auto',\n      overflowX: noHorizontalScrollbar ? 'hidden' : 'auto',\n      backgroundColor: 'white',\n      textAlign: 'left',\n    }}\n  >\n    {children}\n  </div>\n);\n\nconst getAvatar = (name: string) => robohashAvatars.generateAvatar({\n  username: name,\n  background: robohashAvatars.BackgroundSets.RandomBackground1,\n  characters: robohashAvatars.CharacterSets.Kittens,\n  height: 400,\n  width: 400,\n});\nconst getRandomByName = (name: string) => ({\n  name,\n  color: randomColor({\n    luminosity: 'light',\n    format: 'hsl',\n  }),\n  avatar: getAvatar(name),\n});\n\nfunction App() {\n  const history = useHistory();\n  // Hack to async restore initial data (should be called once)\n  const [restoredState, setRestored] = useState<any>(false);\n\n  const [users, setUsers] = useState<UserModel[]>([]);\n  const [topic, setTopic] = useState('');\n  const [currentUserIndex, setUserIndex] = useState(0);\n\n  const removeUserByIndex = (index: number) => {\n    setUsers([...users\n      .filter((_user, currentIndex) => index !== currentIndex)]);\n  };\n  useEffect(() => {\n    (async () => {\n      debug('useEffect');\n      let restoredStateValue;\n      if (!restoredState) {\n        try {\n          restoredStateValue = JSON.parse(\n            await decompress(decodeURIComponent(window.location.hash.substr(3))),\n          );\n          setRestored(restoredStateValue);\n          setUsers(restoredStateValue.users || []);\n          setTopic(restoredStateValue.topic || '');\n          setUserIndex(restoredStateValue.currentUserIndex || 0);\n          debug('restored', { restoredStateValue });\n        } catch (e) {\n          // Bad Hash\n          setRestored({});\n          debug('restore skipped %o', restoredStateValue);\n        }\n      }\n      if (restoredState) {\n        const state = await compress(JSON.stringify({ users, currentUserIndex, topic }));\n        history.push({ hash: state });\n        debug('set state %o', { restoredStateValue, restoredState });\n      }\n    })();\n  }, [users, currentUserIndex, topic]);\n\n  return (\n    <div className=\"App\">\n      <PageTitle />\n      <header className=\"App-header\">\n        <TopHeader />\n      </header>\n      <PageLayout>\n        <Content testId=\"content\">\n          <LeftSidebarWithoutResize\n            testId=\"leftSidebar\"\n            id=\"space-navigation\"\n            skipLinkTitle=\"Available users\"\n            isFixed={false}\n            width={325}\n          >\n            <Wrapper>\n              <div className=\"App-assignees\">\n                <h4>Available Assignees</h4>\n\n                {users.map((user, index) => {\n                  const selected = currentUserIndex === index;\n                  return (\n                    <div className=\"App-assignee\">\n                      <User user={user} selected={selected} status={selected ? 'locked' : undefined} onSelect={() => setUserIndex(index)} onRemove={() => removeUserByIndex(index)} />\n                    </div>\n                  );\n                })}\n                <AddUserBlock onSubmit={(formData) => {\n                  setUsers([...users, getRandomByName(formData.name)]);\n                }}\n                />\n              </div>\n            </Wrapper>\n          </LeftSidebarWithoutResize>\n          <Main testId=\"main\" id=\"main\">\n            <Wrapper minHeight=\"400px\">\n              <InlineEdit\n                defaultValue={topic}\n                onConfirm={(value) => setTopic(value)}\n                label=\"Current responsibility:\"\n                editView={(fieldProps, ref) => (\n                  // @ts-ignore\n                  <TextArea {...fieldProps} ref={ref} />\n                )}\n                readView={() => <article style={{ width: '100%' }} dangerouslySetInnerHTML={{ __html: md(topic || '(click here to edit)') }} />}\n              />\n              {users[currentUserIndex] ? <User selected user={users[currentUserIndex]} status=\"locked\" /> : 'No assignees'}\n              <Button\n                className=\"App-next\"\n                css={{}}\n                type=\"submit\"\n                appearance=\"primary\"\n                onClick={() => setUserIndex(get(users, `[${currentUserIndex + 1}]`) ? currentUserIndex + 1 : 0)}\n              >\n                Set next responsible\n              </Button>\n            </Wrapper>\n          </Main>\n        </Content>\n        <RightPanel\n          testId=\"rightPanel\"\n          id=\"help-panel\"\n          skipLinkTitle=\"Help Panel\"\n          isFixed={false}\n          width={325}\n        >\n          <Wrapper>\n            <InlineMessage type=\"info\" secondaryText=\"FAQ\" placement=\"left-start\" />\n            <article\n              style={{ width: '100%' }}\n              dangerouslySetInnerHTML={{\n                __html: md(\n                  `\n### General Flow\n\n- Add people\n- Write task details\n- Select responsible person\n- Copy link and share\n\n#### Caveats\n**Works only in current session by hash storing in URL**\n\nPossible solution:\n- Edit link in posted chat (yes it huge but it's compressed)\n- Send latest link directly to person\n\n----\n\n### Active parts \n#### Available Assignees\nAdd person name (uniq names are welcome)\n\n#### Current responsibility\nMd supported description (click to edit)\n\n#### Current assignee\nPerson who perform actions\n\n             \n            `,\n                ),\n              }}\n            />\n          </Wrapper>\n        </RightPanel>\n      </PageLayout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","try {\n  // eslint-disable-next-line no-undef\n  registerPaint('slanted-bg', class {\n    constructor() {\n      this.hue = 266;\n    }\n\n    paint(ctx, geom) {\n      // draw random colors\n      ctx.fillStyle = `hsl(${this.hue}, 100%, 50%)`;\n      this.hue += 10;\n\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(geom.width, 0);\n      ctx.lineTo(geom.width - 20, geom.height);\n      ctx.lineTo(0, geom.height);\n      ctx.fill();\n\n      ctx.globalCompositeOperation = 'source-atop';\n\n      ctx.fillStyle = 'rgba(0,0,0,.35)';\n      ctx.beginPath();\n      ctx.moveTo(0, geom.height);\n      ctx.lineTo(geom.width, geom.height - 8);\n      ctx.lineTo(geom.width, geom.height);\n      ctx.fill();\n    }\n  });\n} catch (e) {\n  // no houdini support\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './houdini-modules';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Route exact path=\"/\" component={App} />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}