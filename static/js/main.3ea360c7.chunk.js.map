{"version":3,"sources":["AddUserBlock.tsx","logo.png","TopHeader.tsx","User.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["AdduserBlock","onSubmit","Form","formState","formProps","Field","name","defaultValue","isRequired","fieldProps","Textfield","placeholder","FormFooter","css","type","appearance","TopHeader","AvatarItem","backgroundColor","avatar","Avatar","src","logo","primaryText","User","user","status","onRemove","color","role","tabIndex","onKeyDown","onClick","size","label","Wrapper","borderColor","children","minHeight","noOutline","noHorizontalScrollbar","style","outline","outlineOffset","padding","height","boxSizing","overflowY","overflowX","getAvatar","robohashAvatars","username","background","RandomBackground1","characters","Kittens","width","getRandomByName","randomColor","luminosity","format","restoredState","JSON","parse","decodeURIComponent","window","location","hash","substr","e","App","randomName","random","history","useHistory","useState","users","setUsers","topic","setTopic","currentUserIndex","setUserIndex","useEffect","isEmpty","isEqual","push","stringify","className","testId","id","skipLinkTitle","isFixed","textAlign","minWidth","map","index","undefined","filter","_user","currentIndex","removeUserByIndex","AddUserBlock","formData","display","alignItems","justifyContent","onChange","value","currentTarget","get","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","exact","path","component","document","getElementById"],"mappings":"mXAqCeA,EA3BM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACnB,cAACC,EAAA,EAAD,CACED,SAAU,SAACE,GAAD,OAAyBF,EAASE,IAD9C,SAGG,gBAAGC,EAAH,EAAGA,UAAH,OACC,iDAAUA,GAAV,cACE,cAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,aAAa,GAAGC,YAAU,EAA7C,SACG,gBAAGC,EAAH,EAAGA,WAAH,OACC,qCACE,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAA2BE,YAAY,gBACvC,cAAC,IAAD,0CAON,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAAQC,IAAK,GAAIC,KAAK,SAASC,WAAW,UAA1C,2B,kBC5BK,MAA0B,iCCQ1BC,EAJG,kBAChB,cAACC,EAAA,EAAD,CAAYC,gBAAgB,UAAUC,OAAQ,cAACC,EAAA,EAAD,CAAQC,IAAKC,IAAUC,YAAY,sB,iBC4BpEC,EA5BF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,SAAjB,OAET,cAACV,EAAA,EAAD,CACEC,gBAAiBO,EAAKG,MACtBT,OAAQ,cAACC,EAAA,EAAD,CAAQC,IAAKI,EAAKN,OAAQO,OAAQA,IAC1CH,YACE,qCACGE,EAAKnB,KACL,IACAqB,GACD,sBACEE,KAAK,SACLC,SAAU,EACVC,UAAW,kBAAMJ,KACjBK,QAAS,kBAAML,KAJjB,SAME,cAAC,IAAD,CACEM,KAAK,QACLC,MAAM,wBCAdC,EAAU,SAAC,GAAD,IACdC,EADc,EACdA,YACAC,EAFc,EAEdA,SACAC,EAHc,EAGdA,UACAC,EAJc,EAIdA,UACAC,EALc,EAKdA,sBALc,OAad,qBACEC,MAAO,CACLC,QAASH,EAAY,OAAH,qBAA0BH,GAC5CO,eAAgB,EAChBC,QAAS,EACTN,YACAO,OAAQ,OACRC,UAAW,aACXC,UAAW,OACXC,UAAWR,EAAwB,SAAW,OAC9CtB,gBAAiB,SAVrB,SAaGmB,KAICY,EAAY,SAAC3C,GAAD,OAAkB4C,iBAA+B,CACjEC,SAAU7C,EACV8C,WAAYF,iBAA+BG,kBAC3CC,WAAYJ,gBAA8BK,QAC1CV,OAAQ,IACRW,MAAO,OAEHC,EAAkB,SAACnD,GAAD,MAAmB,CACzCA,OACAsB,MAAO8B,IAAY,CACjBC,WAAY,QACZC,OAAQ,QAEVzC,OAAQ8B,EAAU3C,KAGhBuD,EAAoB,GACxB,IACEA,EAAgBC,KAAKC,MAAMC,mBAAmBC,OAAOC,SAASC,KAAKC,OAAO,KAC1E,MAAOC,IAqGMC,MAjGf,WACE,IAAMC,EAAaC,IAAOlE,OACpBmE,EAAUC,cAFH,EAIaC,mBAAS,YAAId,EAAce,OAAS,CAACnB,EAAgBc,MAJlE,mBAINK,EAJM,KAICC,EAJD,OAKaF,mBAASd,EAAciB,OAAS,IAL7C,mBAKNA,EALM,KAKCC,EALD,OAM4BJ,mBAASd,EAAcmB,kBAAoB,GANvE,mBAMNA,EANM,KAMYC,EANZ,KAiBb,OANAC,qBAAU,YACJC,kBAAQtB,IAAmBuB,kBAAQvB,EAAe,CAAEe,QAAOI,sBAC7DP,EAAQY,KAAK,CAAElB,KAAML,KAAKwB,UAAU,CAAEV,QAAOI,mBAAkBF,cAEhE,CAACF,EAAOI,EAAkBF,IAG3B,sBAAKS,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,WAEE,cAAC,IAAD,CACEC,OAAO,gBACPC,GAAG,qBACHC,cAAc,qBACd7C,OAAQ,GACR8C,SAAS,EALX,SAOE,cAAC,EAAD,CAASvD,YAAY,OAArB,SACE,oBAAIK,MAAO,CAAEmD,UAAW,UAAxB,6CAGJ,eAAC,IAAD,CAASJ,OAAO,UAAhB,UACE,cAAC,IAAD,CACEA,OAAO,cACPC,GAAG,mBACHC,cAAc,kBACdC,SAAS,EACTnC,MAAO,IALT,SAOE,cAAC,EAAD,CAASpB,YAAY,YAArB,SACE,sBAAKK,MAAO,CAAEoD,SAAU,GAAIjD,QAAS,UAArC,UACE,oBAAIH,MAAO,CAAEmD,UAAW,UAAxB,+BACA,8BACGhB,EAAMkB,KAAI,SAACrE,EAAMsE,GAAP,OACT,cAAC,EAAD,CAAMtE,KAAMA,EAAMC,OAAQsD,IAAqBe,EAAQ,cAAWC,EAAWrE,SAAU,kBAzC/E,SAACoE,GACzBlB,EAAS,YAAID,EACVqB,QAAO,SAACC,EAAOC,GAAR,OAAyBJ,IAAUI,OAuCgEC,CAAkBL,SAGjH,cAACM,EAAD,CAAcpG,SAAU,SAACqG,GACvBzB,EAAS,GAAD,mBAAKD,GAAL,CAAYnB,EAAgB6C,EAAShG,sBAOvD,cAAC,IAAD,CAAMkF,OAAO,OAAOC,GAAG,OAAOC,cAAc,sBAA5C,SACE,eAAC,EAAD,CAAStD,YAAY,QAAQE,UAAU,QAAvC,UACE,qBAAIG,MAAO,CAAE8D,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UAApE,qCAEE,cAAC/F,EAAA,EAAD,CAAW8C,MAAO,IAAK3C,IAAK,CAAE2C,MAAO,SAAWjD,aAAcuE,EAAO4B,SAAU,gBAAoBC,EAApB,EAAGC,cAAiBD,MAApB,OAAkC5B,EAAS4B,IAAQhG,YAAY,qBAEhJ,4BAEGiE,EAAMI,GAAoB,cAAC,EAAD,CAAMvD,KAAMmD,EAAMI,GAAmBtD,OAAO,WAAc,mBAGvF,cAAC,IAAD,CACEb,IAAK,GACLC,KAAK,SACLC,WAAW,UACXiB,QAAS,kBAAMiD,EAAa4B,cAAIjC,EAAD,WAAYI,EAAmB,EAA/B,MAAuCA,EAAmB,EAAI,IAJ/F,0CAWN,cAAC,IAAD,CACEQ,OAAO,aACPC,GAAG,aACHC,cAAc,aACdC,SAAS,EACTnC,MAAO,IALT,SAOE,cAAC,EAAD,CAASpB,YAAY,SAArB,SACE,oBAAIK,MAAO,CAAEmD,UAAW,UAAxB,mCCvJGkB,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,SACE,cAAC,aAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpD,QAGrCqD,SAASC,eAAe,SAM1Bd,K","file":"static/js/main.3ea360c7.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport Button from '@atlaskit/button/standard-button';\nimport Form, { Field, FormFooter, HelperMessage } from '@atlaskit/form';\n\nimport Textfield from '@atlaskit/textfield';\n\nexport interface FormData {\n  name: string\n}\n\nconst AdduserBlock = ({ onSubmit }: {onSubmit: (formData: FormData) => void}) => (\n  <Form\n    onSubmit={(formState: FormData) => onSubmit(formState)}\n  >\n    {({ formProps }: any) => (\n      <form {...formProps}>\n        <Field name=\"name\" defaultValue=\"\" isRequired>\n          {({ fieldProps }: any) => (\n            <>\n              <Textfield {...fieldProps} placeholder=\"Enter name\" />\n              <HelperMessage>\n                Add here you collegue\n              </HelperMessage>\n            </>\n          )}\n\n        </Field>\n        <FormFooter>\n          <Button css={{}} type=\"submit\" appearance=\"primary\">\n            Add\n          </Button>\n        </FormFooter>\n      </form>\n    )}\n  </Form>\n);\n\nexport default AdduserBlock;\n","export default __webpack_public_path__ + \"static/media/logo.b231e09d.png\";","import React from 'react';\nimport Avatar, { AvatarItem } from '@atlaskit/avatar';\nimport logo from './logo.png';\n\nconst TopHeader = () => (\n  <AvatarItem backgroundColor=\"#a4b57b\" avatar={<Avatar src={logo} />} primaryText=\"RobinHood Assign\" />\n);\n\nexport default TopHeader;\n","import React from 'react';\nimport Avatar, { AvatarItem } from '@atlaskit/avatar';\nimport CrossIcon from '@atlaskit/icon/glyph/cross';\nimport { UserModel } from './types';\n\nconst User = ({ user, status, onRemove }:{\n  user: UserModel, status: string | undefined, onRemove?: () =>void}) => (\n    <AvatarItem\n      backgroundColor={user.color}\n      avatar={<Avatar src={user.avatar} status={status} />}\n      primaryText={(\n        <>\n          {user.name}\n          {' '}\n          {onRemove && (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={() => onRemove()}\n            onClick={() => onRemove()}\n          >\n            <CrossIcon\n              size=\"small\"\n              label=\"Remove user\"\n            />\n          </span>\n          )}\n\n        </>\n            )}\n    />\n);\n\nexport default User;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n// @ts-ignore\nimport random from 'random-names-places';\n// @ts-ignore\nimport randomColor from 'randomcolor';\nimport { get, isEmpty, isEqual } from 'lodash';\nimport * as robohashAvatars from 'robohash-avatars';\nimport {\n  Content,\n  LeftSidebarWithoutResize,\n  Main,\n  PageLayout,\n  RightPanel,\n  TopNavigation,\n} from '@atlaskit/page-layout';\nimport Button from '@atlaskit/button/standard-button';\nimport { useHistory } from 'react-router-dom';\nimport Textfield from '@atlaskit/textfield';\nimport AddUserBlock from './AddUserBlock';\nimport TopHeader from './TopHeader';\nimport User from './User';\n\nconst Wrapper = ({\n  borderColor,\n  children,\n  minHeight,\n  noOutline,\n  noHorizontalScrollbar,\n}: {\n  borderColor: string;\n  children: React.ReactNode;\n  minHeight?: string;\n  noOutline?: boolean;\n  noHorizontalScrollbar?: boolean;\n}) => (\n  <div\n    style={{\n      outline: noOutline ? 'none' : `0px dashed ${borderColor}`,\n      outlineOffset: -4,\n      padding: 8,\n      minHeight,\n      height: '100%',\n      boxSizing: 'border-box',\n      overflowY: 'auto',\n      overflowX: noHorizontalScrollbar ? 'hidden' : 'auto',\n      backgroundColor: 'white',\n    }}\n  >\n    {children}\n  </div>\n);\n\nconst getAvatar = (name: string) => robohashAvatars.generateAvatar({\n  username: name,\n  background: robohashAvatars.BackgroundSets.RandomBackground1,\n  characters: robohashAvatars.CharacterSets.Kittens,\n  height: 400,\n  width: 400,\n});\nconst getRandomByName = (name: string) => ({\n  name,\n  color: randomColor({\n    luminosity: 'light',\n    format: 'hex',\n  }),\n  avatar: getAvatar(name),\n});\n\nlet restoredState:any = {};\ntry {\n  restoredState = JSON.parse(decodeURIComponent(window.location.hash.substr(3)));\n} catch (e) {\n  // Bad Hash\n}\n\nfunction App() {\n  const randomName = random.name();\n  const history = useHistory();\n\n  const [users, setUsers] = useState([...restoredState.users || [getRandomByName(randomName)]]);\n  const [topic, setTopic] = useState(restoredState.topic || '');\n  const [currentUserIndex, setUserIndex] = useState(restoredState.currentUserIndex || 0);\n  const removeUserByIndex = (index: number) => {\n    setUsers([...users\n      .filter((_user, currentIndex) => index !== currentIndex)]);\n  };\n  useEffect(() => {\n    if (isEmpty(restoredState) || !isEqual(restoredState, { users, currentUserIndex })) {\n      history.push({ hash: JSON.stringify({ users, currentUserIndex, topic }) });\n    }\n  }, [users, currentUserIndex, topic]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TopHeader />\n      </header>\n      <PageLayout>\n\n        <TopNavigation\n          testId=\"topNavigation\"\n          id=\"product-navigation\"\n          skipLinkTitle=\"Product Navigation\"\n          height={90}\n          isFixed={false}\n        >\n          <Wrapper borderColor=\"blue\">\n            <h3 style={{ textAlign: 'center' }}>Assignment queue made easy!</h3>\n          </Wrapper>\n        </TopNavigation>\n        <Content testId=\"content\">\n          <LeftSidebarWithoutResize\n            testId=\"leftSidebar\"\n            id=\"space-navigation\"\n            skipLinkTitle=\"Available users\"\n            isFixed={false}\n            width={325}\n          >\n            <Wrapper borderColor=\"darkgreen\">\n              <div style={{ minWidth: 50, padding: '0 20px' }}>\n                <h4 style={{ textAlign: 'center' }}>Available persons</h4>\n                <p>\n                  {users.map((user, index) => (\n                    <User user={user} status={currentUserIndex === index ? 'locked' : undefined} onRemove={() => removeUserByIndex(index)} />\n\n                  ))}\n                  <AddUserBlock onSubmit={(formData) => {\n                    setUsers([...users, getRandomByName(formData.name)]);\n                  }}\n                  />\n                </p>\n              </div>\n            </Wrapper>\n          </LeftSidebarWithoutResize>\n          <Main testId=\"main\" id=\"main\" skipLinkTitle=\"Current Responsible\">\n            <Wrapper borderColor=\"black\" minHeight=\"400px\">\n              <h4 style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                Current Responsible for:\n                <Textfield width={150} css={{ width: '150px' }} defaultValue={topic} onChange={({ currentTarget: { value } }) => setTopic(value)} placeholder=\"(Enter topic)\" />\n              </h4>\n              <p>\n\n                {users[currentUserIndex] ? <User user={users[currentUserIndex]} status=\"locked\" /> : 'No responsible'}\n              </p>\n\n              <Button\n                css={{}}\n                type=\"submit\"\n                appearance=\"primary\"\n                onClick={() => setUserIndex(get(users, `[${currentUserIndex + 1}]`) ? currentUserIndex + 1 : 0)}\n              >\n                Set next responsible\n              </Button>\n            </Wrapper>\n          </Main>\n        </Content>\n        <RightPanel\n          testId=\"rightPanel\"\n          id=\"help-panel\"\n          skipLinkTitle=\"Help Panel\"\n          isFixed={false}\n          width={225}\n        >\n          <Wrapper borderColor=\"orange\">\n            <h3 style={{ textAlign: 'center' }}>Help Panel</h3>\n          </Wrapper>\n        </RightPanel>\n      </PageLayout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Route exact path=\"/\" component={App} />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}